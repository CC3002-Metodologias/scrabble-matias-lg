package cl.uchile.dcc.scrabble.gui.nativeClasses;

import cl.uchile.dcc.scrabble.gui.natives.INumber;
import java.util.Objects;

/**
 * float class of Scrabble, stores a Java double
 */
public class SFloat implements INumber {

  private double value;

  /**
   * Native float type for Scrabble
   *
   * @param value double to store in the object
   */
  public SFloat(double value) {
    this.value = value;
  }

  /**
   * @return stored double
   */
  public double getValue() {
    return value;
  }

  /**
   * Gets the stored double as a String
   *
   * @return saved double as a String
   */
  @Override
  public String toString() {
    return Double.toString(value);
  }

  /**
   * Compare two SFloat by their stored values
   *
   * @param o Object to compare, must be a SFloat for it to return true
   * @return true if both SFloat store the same double
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (!(o instanceof SFloat)) {
      return false;
    }
    SFloat that = (SFloat) o;
    return Double.compare(that.getValue(), getValue()) == 0;
  }

  /**
   * representative Hash of a SFloat generated by its stored double
   *
   * @return hash of the stored double
   */
  @Override
  public int hashCode() {
    return Objects.hash(getValue());
  }

  /**
   * Converts a SFloat to SString
   *
   * @return SString that stores the current double as a String
   */
  @Override
  public SString toSString() {
    return new SString(toString());
  }

  /**
   * Creates new SString containing sum of string and saved value as string
   * @param str SString to sum with
   * @return new SString containing sum of strings
   */
  @Override
  public SString sumWithString(SString str) {
    return new SString(str.getValue() + this);
  }

  /**
   * Creates a copy of a SFloat
   *
   * @return new SFloat containing the same double
   */
  public SFloat toSFloat() {
    return new SFloat(this.getValue());
  }

  /**
   * Adds a SFloat with other INumber type
   *
   * @param num number to add
   * @return sum of two numbers as a SFloat
   */
  public INumber add(INumber num) {
    return num.sumWithFloat(this);
  }


  /**
   * Substracts a SFloat with other INumber type
   *
   * @param num number to substract
   * @return substraction of two numbers: this - num as a SFloat
   */
  public INumber subs(INumber num) {
    return num.subsWithFloat(this);
  }

  /**
   * Multiplies a SFloat with other INumber type
   *
   * @param num number to multiply with
   * @return Product of two numbers: this * num as a SFloat
   */
  public INumber mult(INumber num) {
    return num.multWithFloat(this);
  }

  /**
   * Division of a SFloat with other INumber type
   *
   * @param num number to divide
   * @return Division of two numbers: this / num as a SFloat
   */
  public INumber div(INumber num) {
    return num.divWithFloat(this);
  }

  /**
   * Addition of SFloat and SInt
   *
   * @param num SInt to sum with
   * @return Result of num + this (as SFloat)
   */
  @Override
  public INumber sumWithInt(SInt num) {
    double a = num.getValue();
    double b = getValue();
    return new SFloat(Double.sum(a, b));
  }

  /**
   * Substraction of SInt and SFloat
   *
   * @param num SInt to substract with
   * @return Result of num - this (as SFloat)
   */
  @Override
  public INumber subsWithInt(SInt num) {
    double a = num.getValue();
    double b = getValue();
    return new SFloat(a - b);
  }

  /**
   * Multiplication of a SInt with a SFloat
   *
   * @param num SInt to multiply with
   * @return result of num * this as a SFloat
   */
  @Override
  public INumber multWithInt(SInt num) {
    double a = num.getValue();
    double b = getValue();
    return new SFloat(a * b);
  }


  /**
   * Division of a SInt with a SFloat
   *
   * @param num SInt to divide with
   * @return result of num / this as a SFloat
   */
  @Override
  public INumber divWithInt(SInt num) {
    double a = num.getValue();
    double b = getValue();
    return new SFloat(a / b);
  }


  /**
   * Addition of a SInt with a SFloat
   *
   * @param num SInt to sum with
   * @return result of num + this as a SFloat
   */
  @Override
  public INumber sumWithFloat(SFloat num) {
    double a = num.getValue();
    double b = getValue();
    return new SFloat(a + b);
  }

  /**
   * Substraction of a SFloat with a SFloat
   *
   * @param num SFloat to sum with
   * @return result of num + this as a SFloat
   */
  @Override
  public INumber subsWithFloat(SFloat num) {
    double a = num.getValue();
    double b = getValue();
    return new SFloat(a - b);
  }

  /**
   * Division of a SFloat with a SFloat
   *
   * @param num SFloat to divide with
   * @return result of num / this as a SFloat
   */
  @Override
  public INumber divWithFloat(SFloat num) {
    double a = num.getValue();
    double b = getValue();
    return new SFloat(a / b);
  }

  /**
   * Multiplication of a SFloat with a SFloat
   *
   * @param num SFloat to multiply with
   * @return result of num * this as a SFloat
   */
  @Override
  public INumber multWithFloat(SFloat num) {
    double a = num.getValue();
    double b = getValue();
    return new SFloat(a * b);
  }
}
